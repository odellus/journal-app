"""
Alembic migration environment for journal_app
"""

from logging.config import fileConfig
from pathlib import Path
import sys
from alembic import context
from sqlalchemy import engine_from_config, pool
from sqlmodel import SQLModel

# ---------------------------------------------------------------------------
# Ensure backend/src is importable (only matters if you didn't `pip install -e .`)
# ---------------------------------------------------------------------------
SRC_PATH = Path(__file__).resolve().parents[1] / "src"
if str(SRC_PATH) not in map(str, (Path(p).resolve() for p in sys.path)):
    sys.path.append(str(SRC_PATH))
# ---------------------------------------------------------------------------

from journal_app.db import DATABASE_URL          # noqa: E402
import journal_app.models                        # noqa: F401  make models visible to Alembic

config = context.config

# Configure logging
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# Override the URL from alembic.ini with the real one from the app
config.set_main_option("sqlalchemy.url", DATABASE_URL)

target_metadata = SQLModel.metadata


# ---- helper so AutoString renders as sa.String in autogenerated scripts ----
def render_item(type_, obj, autogen_context):
    if type_ == "type" and str(obj) == "sqlmodel.sql.sqltypes.AutoString":
        autogen_context.imports.add("import sqlalchemy as sa")
        return "sa.String()"
    return False
# ---------------------------------------------------------------------------


def run_migrations_offline() -> None:
    """Run migrations without an active DB connection (outputs SQL)."""
    context.configure(
        url=DATABASE_URL,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
        render_item=render_item,
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online() -> None:
    """Run migrations with a live DB connection."""
    connectable = engine_from_config(
        config.get_section(config.config_ini_section, {}),
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
            render_item=render_item,
        )

        with context.begin_transaction():
            context.run_migrations()


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
